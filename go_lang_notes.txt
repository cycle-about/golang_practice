Tutorials

Resume Tutorials https://go.dev/doc/tutorial/getting-started
	/ 1. Getting started - 1/27/25
	/ 2. Create a Go module - finished 2/15/25
		/ a. Create a module
		/ b. Call code from another module
		/ c. Return and handle an error
		/ d. Return a random greeting
		/ e. Return greetings for multiple people
		/ f. Add a test
		/ g. Compile and install the application
	3. Getting started with multi-module workspaces
	4. Accessing a relational database
	5. Developing a RESTful API with Go and Gin
	6. Getting started with generics
	7. Getting started with fuzzing
	8. Gettins started with govulncheck
	9. Find and fix vulnerabile dependencies with VS Code Go
	10. A tour of Go


=====================================


2/15/25

Resume executable install tutorial, https://go.dev/doc/tutorial/compile-install
Repeat the commands in tutorial
	// in /home/laura/Documents/CS_Study/Go_Lang/tutorial/hello
	$ go build
		// this remakes 'hello' binary in working dir. 'You've compiled the app into an executable so you can run it. But to run it currently, your propmpt needs either to be in the exe's dir or specify the exe's path. Next install exe so you can run it without specifying path.' Installing it seems to mean adding it to Go's location
	$ ./hello 
		map[Darrin:Hi, Darrin. Welcome! Gladys:Hi, Gladys. Welcome! Samantha:Hi, Samantha. Welcome!]
	$ go list -f '{{.Target}}'
		/home/laura/go/bin/hello
		// this is the install path, where the go command will install the current package
	$ ll /home/laura/go/bin/hello
		-rwxrwxr-x 1 laura laura 2265855 Feb 11 20:29 /home/laura/go/bin/hello*
	$ file /home/laura/go/bin/hello
		/home/laura/go/bin/hello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, Go BuildID=1w9wEh8RBZis2_xkLX6M/eOAKcw0ZU5yiiXpMtRJ8/NLK6t2yr6bl6_YASf6yo/CgOwlW6AFER0KJNxHmyT, with debug_info, not stripped
	$ go install
	$ export PATH=$PATH:/home/laura/go/bin/hello
	$ hello
		Command 'hello' not found, but can be installed with...
	$ sudo hello
	$ echo $PATH
		/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin:/usr/local/go/bin:/home/laura/go/bin/hello	sudo: hello: command not found
	// strange: now there is no longer a 'hello' binary in the working dir
	$ ll /home/laura/go/bin/hello
		-rwxrwxr-x 1 laura laura 2265847 Feb 15 16:44 /home/laura/go/bin/hello*

Note: go install removes the binary from the dir with the go program

Write up my question
	I am following this Go language tutorial (https://go.dev/doc/tutorial/compile-install) that uses the command 'go install' to install an executable so it can run without specifying its path. These are the commands I've run, and their outupt. Why does my installed executable not run?

	$ ls
		go.mod  go.sum  hello.go
	$ go build
	$ ls
		go.mod  go.sum  hello  hello.go
	$ ./hello
		map[Darrin:Hi, Darrin. Welcome! Gladys:Hi, Gladys. Welcome! Samantha:Hi, Samantha. Welcome!]
	$ go list -f '{{.Target}}'
		/home/laura/go/bin/hello
	$ go install
	$ export PATH=$PATH:/home/laura/go/bin/hello
	$ echo $PATH
		/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin:/usr/local/go/bin:/home/laura/go/bin/hello:/home/laura/go/bin/hello
	$ file /home/laura/go/bin/hello
		/home/laura/go/bin/hello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, Go BuildID=1w9wEh8RBZis2_xkLX6M/eOAKcw0ZU5yiiXpMtRJ8/NLK6t2yr6bl6_YASf6yo/CgOwlW6AFER0KJNxHmyT, with debug_info, not stripped
	$ $ hello
		Command 'hello' not found, but can be installed with

Realized before asking chat, this allows the binary to run:
	$ export PATH=$PATH:/home/laura/go/bin/
Needed the parent dir of the exe, not the exe path

Notes about behavior of $PATH
	- 'export $PATH' only applies for the current session, gone after browser reopened
	- the items persistently in PATH are set for m machine in ~/.profile
	- 'specifies a list of directories where executable files are located. When you run a command in the terminal, the system searches through these directories, in order, to find the executable file for that command'


Tutorial 3. Getting started with multi-module workspaces


-----------------------------------

2/13/25

Continue Alex Mux tutorial video
Channel create: var c = make(chan int)
range c: iterates over the contents of the channel
'defer' can be declared at top of method, and executes just before method exits
Can use source channel as cases in a select statement
Capital-letter named functions can be imported elsewhere, lower-case named functions are only local

Watch another tutorial, 1:34 hour
	Full Golang Tutorial - Learn Go by Building a TodoList App
	TechWorld with Nana
	https://www.youtube.com/watch?v=XCZWyN9ZbEQ

This video is a low slower, more basics
Reasons for go: better parallelization, distributed infrastructure, multiple processors
Go has built-in concurrency handling to run distributed
Docker and Kubernetes written in Go
Same Go binary can run on eg linux and windows
Uses Goland IDE, by JetBrains
Whole lot about the IDE
Ended at 20:00

-----------------------------------

2/12/25

Watch tutorial, 1:07 hour
	Learn GO Fast: Full Tutorial
	Alex Mux
	https://www.youtube.com/watch?v=8uiZC0l4Ajw

Go has built-in concurrency with goroutines
Package: director with go files
Module: made from package
In Go it is an error to import a package but not use it, same for declaring variable
cap(sliceName) returns the capacity of a slice, different from len(sliceName) that returns the count of its indices used
Can specify the capacity of a slice when creating it
	var intslice []int32 = make(int32[], 3, 8)   // length 3, capacity 8
By default capacity of slice is same as its length
Map will ALWAYS return a value even if key does not exist (returns default value of value type, nil or 0)
Use the boolean in map return value that shows whether key exists
len(string) returns its length in bytes not characters
Runes though will be consistent between character and byte
Can make 'single-use' structs, as a var: have to re-declare full struct{} to make another one
Has interface data type, to define a required method
Pointers declared using * syntax
	var p *int32  // intializes to nil, meaning it does not have an address assigned (ie available place for value)
	var p *int32 = new(int32)  // now has an address eg 0x1b0c, and at that location is default int value 0
Concurrency
	sync.WaitGroup{}, wg.Add(1), wg.Wait(), wg.Done
	sync.Mutex{}, m.lock(), m.Unlock()
Channel: values stay in them until they're read

Ended at 49:00

-----------------------------------

2/11/25

Read all code in the prior versions, and ask any questions in chatgpt, save answers
The name of the testing file, ending with '_test', flags it to be executed with command 'go test'
Try changing 'greetings_test.go' to 'thing_test.go' and run 'go test'
	-> still executes

https://go.dev/doc/tutorial/compile-install
	Works, prints out names same as 'go run .'
		$ go build
		$ ./hello
	'go install' means the executable can be run without specifying its path
	Get the install path of binaries
		$ go list -f '{{.Target}}'
			/home/laura/go/bin/hello

Install steps to not result in being able to execute 'hello' from another dir
	This left the terminal session not finding the go binary at all (showing prompt to install go with apt)
		$ export PATH=/home/laura/go/bin/hello
	I think my error was leaving on the 'hello' at the end, should be /home/laura/go/bin/

	Variations of second option also not working, with or without final dir
		$ go list -f '{{.Target}}'
			/home/laura/go/bin/hello
		$ go env -w GOBIN=/home/laura/go/bin/hello
		$ go install
			example/hello: go install example/hello: mkdir /home/laura/go/bin/hello/: file exists
		$ cd ../
		tutorial $ hello
			Command 'hello' not found, but can be installed with:
			sudo snap install hello              # version 2.10, or
			sudo apt  install hello              # version 2.10-3
			sudo apt  install hello-traditional  # version 2.10-6
			See 'snap info hello' for additional versions.
		tutorial $ go env -w GOBIN=/home/laura/go/bin/
		tutorial $ cd hello/
		$ go install
		$ hello
			Command 'hello' not found, but can be installed with:
			sudo snap install hello              # version 2.10, or
			sudo apt  install hello              # version 2.10-3
			sudo apt  install hello-traditional  # version 2.10-6
			See 'snap info hello' for additional versions.

Check into: will the install step not over-write an existing /home/laura/go/bin/hello/?

-----------------------------------

2/9/25

Redo Go install after OS reinstall - https://go.dev/doc/install
	Got go1.23.6.linux-amd64.tar.gz - https://go.dev/dl
	Added this to $HOME/.profile, and ran in terminal to apply now
		export PATH=$PATH:/usr/local/go/bin
	$ go version
		-> go version go1.23.6 linux/amd64

Check that 'Getting started' program still works
	$ go run .
		 -> go: downloading rsc.io/quote v1.5.2
			go: downloading rsc.io/sampler v1.3.0
			go: downloading golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
			Don't communicate by sharing memory, share memory by communicating.

Next tutorial: Create a module - https://go.dev/doc/tutorial/create-module
	Finding: seems there can only be one file in a module dir that declares main
	I tried leaving 'hello_v1.go' in the same dir, but then calling 'go run .' throws this error
		# example/hello
		./hello_v1.go:13:6: main redeclared in this block
		./hello.go:9:6: other declaration of main
	Rename hello_v1.go to hello_v1.txt: then the run works
	Note: shows returning multiple values from a function, eg (string, error) - https://go.dev/doc/tutorial/handle-errors
	Error handling: https://go.dev/doc/tutorial/handle-errors

-----------------------------------

1/27/25

Download and install - https://go.dev/dl - got go1.23.5.linux-amd64.tar.gz

	$ sudo tar -C /usr/local -xzf go1.23.5.linux-amd64.tar.gz
	$ vi $HOME/.profile 
	$ export PATH=$PATH:/usr/local/go/bin
	$ go version
		-> go version go1.23.5 linux/amd64

Getting Started - https://go.dev/doc/tutorial/getting-started
	Module: tracks the dependencies from other modules that it uses
	Package repository - https://pkg.go.dev/
	Needed to 'get' the module, in addition to import it in the file [I tried to run it before executing the next step that handled it]
	-> hello.go:11:8: no required module provides package rsc.io/quote; to add it: go get rsc.io/quote
	Works after executing that
	Odd the tutorial said to use 'go mod tidy'
	'go help mod tidy' answer: Tidy makes sure go.mod matches the source code in the module. It adds any missing modules necessary to build the current module's packages and dependencies,
	